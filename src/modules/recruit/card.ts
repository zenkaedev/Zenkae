// src/modules/recruit/card.ts
// Zenkae â€” Recruit Application Card (Components V2 only, sem embeds)
// Regra: se o usuÃ¡rio NÃƒO tiver banner â†’ NÃƒO exibir imagem.
// Layout: Banner (opcional) â†’ CabeÃ§alho (tÃ­tulo + infos + avatar Ã  direita)
// Â  Â  Â  Â  â†’ Separador â†’ "FormulÃ¡rio" (Q/A) â†’ Separador â†’ Status â†’ BotÃµes

import type { Client, User } from 'discord.js';
import { ButtonStyle, MessageFlags } from 'discord.js';
// Importa a funÃ§Ã£o para buscar a contagem de mensagens
import { getMessageCount } from '../../listeners/messageCount.js';


// Component type ids (Components V2)
const V2 = {
Â  ActionRow: 1,
Â  Button: 2,
Â  Section: 9,
Â  TextDisplay: 10,
Â  Thumbnail: 11,
Â  MediaGallery: 12,
Â  File: 13,
Â  Separator: 14,
Â  Container: 17,
} as const;

export type ApplicationStatus = 'pending' | 'approved' | 'rejected';

export interface BuildExtras {
Â  questions?: string[];
Â  dmAcceptedTemplate?: string | null;
Â  dmRejectedTemplate?: string | null;
Â  locale?: string; Â  Â  Â  Â  Â  Â  Â  Â  Â  Â // ex.: 'pt-BR'
Â  accentColor?: number; Â  Â  Â  Â  Â  Â  Â // RGB ex.: 0x3D348B
}

type MaybeDate = Date | string | number | null | undefined;

// Helper para parsear JSON de forma segura
function parseJsonArray(jsonString: string | null | undefined): string[] {
  if (!jsonString) return [];
  try {
    const parsed = JSON.parse(jsonString);
    return Array.isArray(parsed) ? parsed : [];
  } catch {
    return [];
  }
}

/**
Â * ConstrÃ³i o cartÃ£o de candidatura usando Components V2.
Â * - Se houver banner do usuÃ¡rio â†’ adiciona Media Gallery no topo
Â * - Se NÃƒO houver â†’ nÃ£o adiciona mÃ­dia (sem fallback roxo)
Â * - Avatar do candidato no HEAD (thumbnail Ã  direita)
Â */
export async function buildApplicationCard(
Â  client: Client,
Â  app: any,
Â  extras?: BuildExtras,
) {
Â  // --------- dados bÃ¡sicos ---------
Â  const guildId: string | null = app?.guildId ?? null;
Â  const userId: string | null = app?.userId ?? null;
Â  const nick: string = (app?.nick ?? '').toString();
Â  const className: string = (app?.className ?? '').toString();
Â  const status: ApplicationStatus = (app?.status ?? 'pending') as ApplicationStatus;

Â  // quem moderou (quando aprovado/recusado)
Â  const moderatorId: string | null = app?.moderatorId ?? app?.staffId ?? null;
Â  const moderatorNameFromDb: string | null = app?.moderatorName ?? null;
Â  const reason: string | null = (app?.reason ?? null) || null;

Â  // timestamps
Â  const createdAt: MaybeDate = app?.createdAt ?? null;
Â  const updatedAt: MaybeDate = app?.updatedAt ?? createdAt ?? null;

Â  const locale = extras?.locale ?? 'pt-BR';

Â  // --------- fetch usuÃ¡rio e urls ---------
Â  const user = userId ? await safeFetchUser(client, userId) : null;
Â  const displayName = user?.globalName ?? user?.username ?? app?.username ?? 'UsuÃ¡rio';
Â  const avatarUrl = user?.displayAvatarURL({ size: 256 });
Â  const bannerUrl = user?.bannerURL?.({ size: 2048 }) ?? null;

  // Busca a contagem de atividade diretamente aqui.
  const activityCount = guildId && userId ? await getMessageCount(guildId, userId) : 0;

Â  // --------- SeÃ§Ã£o principal com todas as infos e avatar ---------
  // Combina Nick, Classe e Atividade em um Ãºnico componente de texto
  // para respeitar o limite de 3 componentes de texto por SeÃ§Ã£o da API do Discord.
  const infoLines: string[] = [
    `**Nick:** ${escapeMd(nick || 'â€”')}`,
    `**Classe:** ${escapeMd(className || 'â€”')}`
  ];

  if (typeof activityCount === 'number') {
    infoLines.push(`**Atividade no servidor:** ${activityCount} msgs`);
  }

Â  const mainSectionComponents = [
Â  Â  { type: V2.TextDisplay, content: `# ${escapeMd(`Candidatura de ${displayName}`)}` },
    { type: V2.TextDisplay, content: infoLines.join('\n') },
Â  ];

Â  const mainSection: any = {
Â  Â  type: V2.Section,
Â  Â  components: mainSectionComponents,
Â  Â  accessory: avatarUrl
Â  Â  Â  ? {
Â  Â  Â  Â  Â  type: V2.Thumbnail,
Â  Â  Â  Â  Â  media: { url: avatarUrl },
Â  Â  Â  Â  Â  description: 'Avatar do candidato',
Â  Â  Â  Â  }
Â  Â  Â  : undefined,
Â  };


Â  // --------- seÃ§Ã£o FormulÃ¡rio (Q/A) ---------
Â  const qaComponents: any[] = [];
Â  const questions: string[] = (extras?.questions ?? [])
Â  Â  .map((q) => (q ?? '').toString())
Â  Â  .filter((q) => q.trim().length > 0)
Â  Â  .slice(0, 4);

Â  const answers: string[] = parseJsonArray(app?.qAnswers);

  // Exibe a seÃ§Ã£o de formulÃ¡rio se houver perguntas, mesmo sem respostas.
Â  if (questions.length > 0) {
Â  Â  qaComponents.push({ type: V2.TextDisplay, content: `## FormulÃ¡rio` });
Â  Â  for (let i = 0; i < questions.length; i++) {
Â  Â  Â  const rawQ = questions[i] ?? '';
Â  Â  Â  const rawA = answers[i] ?? 'â€”'; // Fallback para resposta vazia

Â  Â  Â  const label = escapeMd(rawQ);
Â  Â  Â  const value = escapeMd(rawA);

Â  Â  Â  qaComponents.push({
Â  Â  Â  Â  type: V2.TextDisplay,
Â  Â  Â  Â  content: `**${label}:** ${value}`,
Â  Â  Â  });
Â  Â  }
Â  }

Â  // --------- status ---------
  const statusText = await renderStatus({
    client,
    status,
    moderatorId,
    moderatorNameFromDb: app?.moderatorName ?? null,
    timestamp: updatedAt,
    reason,
    locale,
    moderatedByDisplay: app?.moderatedByDisplay,
    moderatedAt: app?.moderatedAt,
  });

  // --------- botÃµes ---------
Â  const buttonsRow = {
Â  Â  type: V2.ActionRow,
Â  Â  components: [
Â  Â  Â  {
Â  Â  Â  Â  type: V2.Button,
Â  Â  Â  Â  style: ButtonStyle.Success,
Â  Â  Â  Â  custom_id: `recruit:decision:approve:${app.id}`,
Â  Â  Â  Â  label: 'Aprovar',
Â  Â  Â  },
Â  Â  Â  {
Â  Â  Â  Â  type: V2.Button,
Â  Â  Â  Â  style: ButtonStyle.Danger,
Â  Â  Â  Â  custom_id: `recruit:decision:reject:${app.id}`,
Â  Â  Â  Â  label: 'Recusar',
Â  Â  Â  },
Â  Â  ],
Â  };

Â  // --------- montagem do Container ---------
Â  const containerChildren: any[] = [];

Â  // banner (topo) â€” somente se houver
Â  if (bannerUrl) {
Â  Â  containerChildren.push({
Â  Â  Â  type: V2.MediaGallery,
Â  Â  Â  items: [{ media: { url: bannerUrl } }],
Â  Â  });
Â  }

Â  // Adiciona a seÃ§Ã£o principal unificada
Â  containerChildren.push(mainSection);

Â  // separador
Â  containerChildren.push({ type: V2.Separator, divider: true, spacing: 1 });

Â  // formulÃ¡rio
Â  if (qaComponents.length) {
Â  Â  containerChildren.push(...qaComponents);
Â  Â  containerChildren.push({ type: V2.Separator, divider: true, spacing: 1 });
Â  }

Â  // status
Â  if (statusText) {
Â  Â  containerChildren.push({ type: V2.TextDisplay, content: statusText });
Â  }

  // [ALTERAÃ‡ÃƒO] Define a cor do container com base no status da aplicaÃ§Ã£o.
  const accentColor =
    status === 'approved' ? 0x57F287 :   // Verde para aprovado
    status === 'rejected' ? 0xED4245 :   // Vermelho para recusado
    extras?.accentColor ?? 0x3D348B;     // Roxo padrÃ£o para pendente

Â  const components: any[] = [
Â  Â  {
Â  Â  Â  type: V2.Container,
Â  Â  Â  accent_color: accentColor,
Â  Â  Â  components: containerChildren,
Â  Â  },
Â  ];

  // Adiciona a fileira de botÃµes apenas se o status for 'pending'
  if (status === 'pending') {
    components.push(buttonsRow);
  }

Â  // payload final V2
Â  return {
Â  Â  flags: MessageFlags.IsComponentsV2, // 1 << 15
Â  Â  components,
Â  } as const;
}

// ---------- helpers ----------

async function safeFetchUser(client: Client, userId: string): Promise<User | null> {
Â  try {
Â  Â  const u = await client.users.fetch(userId, { force: true });
Â  Â  return u ?? null;
Â  } catch {
Â  Â  return null;
Â  }
}

function escapeMd(input: string): string {
Â  return (input ?? '')
Â  Â  .replace(/\\/g, '\\\\')
Â  Â  .replace(/\*/g, '\\*')
Â  Â  .replace(/_/g, '\\_')
Â  Â  .replace(/`/g, '\\`')
Â  Â  .replace(/\|/g, '\\|');
}

function formatDate(ts: MaybeDate, locale = 'pt-BR'): string {
Â  if (!ts) return '';
Â  const d = ts instanceof Date ? ts : new Date(ts);
Â  if (Number.isNaN(d.getTime())) return '';
Â  return new Intl.DateTimeFormat(locale, {
Â  Â  dateStyle: 'short',
Â  Â  timeStyle: 'short',
Â  }).format(d);
}

async function renderStatus(opts: {
  client: Client;
  status: ApplicationStatus;
  moderatorId: string | null;
  moderatorNameFromDb: string | null;
  timestamp: MaybeDate;
  reason: string | null;
  locale: string;
  moderatedByDisplay?: string | null;
  moderatedAt?: Date | null;
}): Promise<string> {
  const { client, status, moderatorId, moderatorNameFromDb, timestamp, reason, locale, moderatedByDisplay, moderatedAt } = opts;

  if (status === 'pending') {
    return 'ðŸŸ¡ **Status:** Em anÃ¡lise pela staff';
  }

  // tenta resolver displayName do moderador
  let modName = moderatedByDisplay ?? moderatorNameFromDb ?? null;
  if (!modName && moderatorId) {
    const mod = await safeFetchUser(client, moderatorId);
    modName = mod?.globalName ?? mod?.username ?? null;
  }
  const who = escapeMd(modName ?? 'Staff');
  const when = formatDate(moderatedAt ?? timestamp, locale);
  const whenTxt = when ? ` em ${when}` : '';

  if (status === 'approved') {
    return `ðŸŸ¢ **Status:** Aprovado por ${who}${whenTxt}`;
  }

  // rejected
  const reasonTxt = reason ? ` pelo motivo: ${escapeMd(reason)}` : '';
  return `ðŸ”´ **Status:** Recusado por ${who}${whenTxt}${reasonTxt}`;
}
