datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ... seu datasource e generator permanecem

model Application {
  id                 String    @id @default(cuid())
  guildId            String
  userId             String
  username           String // nome de usu√°rio discord (salvo no momento da aplica√ß√£o)
  nick               String
  className          String
  status             String    @default("pending") // pending | approved | rejected
  qAnswers           String? // array de respostas (at√© 4)
  reason             String? // motivo da recusa (se houver)
  messageId          String? // id da mensagem do cart√£o no canal de formul√°rios
  channelId          String? // canal onde o cart√£o foi publicado
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt

  // NOVOS CAMPOS:
  moderatedById      String?
  moderatedByDisplay String?
  moderatedAt        DateTime?

  @@index([guildId, userId])
}model RecruitSettings {
  guildId              String  @id        // uma config por guild
  panelChannelId       String?            // canal fixo do painel p√∫blico
  formsChannelId       String?            // canal para os cart√µes (aprova√ß√£o)
  appearanceTitle      String?            // t√≠tulo do painel p√∫blico
  appearanceDescription String?           // descri√ß√£o do painel p√∫blico
  appearanceImageUrl   String?            // imagem custom (opcional)
  questions            String    @default("[]") // array de at√© 4 strings (perguntas)
  dmAcceptedTemplate   String   @default("Parab√©ns! Voc√™ foi aprovado üéâ")
  dmRejectedTemplate   String   @default("Obrigado por se inscrever. Infelizmente sua candidatura foi recusada. Motivo: {reason}")
  createdAt            DateTime @default(now())
  updatedAt            DateTime @updatedAt
}

model MessageCounter {
  id       String   @id @default(cuid())
  guildId  String
  userId   String
  count    Int      @default(0)
  updatedAt DateTime @updatedAt

  @@unique([guildId, userId])
}

model RecruitPanel {
  guildId   String   @id
  channelId String
  messageId String
  updatedAt DateTime @updatedAt
}

// ---------- Eventos ----------
model Event {
  id          String   @id @default(cuid())
  guildId     String
  title       String
  description String?
  startsAt    DateTime
  status      String   @default("scheduled") // 'scheduled' | 'cancelled' | 'completed'
  channelId   String
  messageId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  rsvps      EventRsvp[]
  reminders  EventReminder[]

  @@index([guildId, startsAt])
}

model EventRsvp {
  id        String   @id @default(cuid())
  eventId   String
  guildId   String
  userId    String
  choice    String   // 'yes' | 'maybe' | 'no'
  updatedAt DateTime @updatedAt

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@index([guildId, eventId, choice])
}

model EventReminder {
  id      String   @id @default(cuid())
  eventId String
  kind    String   // '24h' | '1h' | '15m'
  sentAt  DateTime @default(now())

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, kind])
}

// ---------- Atividade semanal (check-in) ----------
model MemberActivity {
  id          String   @id @default(cuid())
  guildId     String
  userId      String
  lastCheckAt DateTime @default(now())

  @@unique([guildId, userId])
}

model ActivityPanel {
  guildId    String   @id
  channelId  String
  messageId  String
  weekStart  DateTime
  updatedAt  DateTime @updatedAt
}
