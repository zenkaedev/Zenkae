// prisma/schema.prisma
datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// ===== Recruiting =====

model Application {
  id        String   @id @default(cuid())
  guildId   String
  userId    String
  username  String
  nick      String
  className String
  classId   String?
  status    String   @default("pending") // 'pending' | 'approved' | 'rejected'
  qAnswers  String   @default("[]")      // JSON string
  reason    String?
  messageId String?
  channelId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // ModeraÃ§Ã£o
  moderatedById      String?
  moderatedByDisplay String?
  moderatedAt        DateTime?

  @@index([guildId, userId])
  @@index([guildId, status, createdAt])
}

model RecruitSettings {
  guildId               String  @id
  panelChannelId        String?
  formsChannelId        String?

  appearanceTitle       String?
  appearanceDescription String?
  appearanceImageUrl    String?
  appearanceThumbUrl    String?
  appearanceAccent      Int? // 0xRRGGBB opcional

  questions             String   @default("[]") // JSON string
  classes               String   @default("[]") // JSON string { id,name,emoji,roleId,color }
  defaultApprovedRoleId String?

  dmAcceptedTemplate String   @default("ParabÃ©ns! VocÃª foi aprovado ðŸŽ‰")
  dmRejectedTemplate String   @default("Obrigado por se inscrever. Infelizmente sua candidatura foi recusada. Motivo: {reason}")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model MessageCounter {
  id        String   @id @default(cuid())
  guildId   String
  userId    String
  count     Int      @default(0)
  updatedAt DateTime @updatedAt

  @@unique([guildId, userId])
}

model RecruitPanel {
  guildId   String   @id
  channelId String
  messageId String
  updatedAt DateTime @updatedAt
}

// ===== Eventos (RSVP) =====

model Event {
  id          String   @id @default(cuid())
  guildId     String
  title       String
  description String?
  startsAt    DateTime
  status      String   @default("scheduled") // 'scheduled' | 'cancelled' | 'completed'
  channelId   String
  messageId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  rsvps     EventRsvp[]
  reminders EventReminder[]

  @@index([guildId, startsAt])
}

model EventRsvp {
  id        String   @id @default(cuid())
  eventId   String
  guildId   String
  userId    String
  choice    String   // 'yes' | 'maybe' | 'no'
  updatedAt DateTime @updatedAt

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@index([guildId, eventId, choice])
}

model EventReminder {
  id      String   @id @default(cuid())
  eventId String
  kind    String   // '24h' | '1h' | '15m'
  sentAt  DateTime @default(now())

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, kind])
}

// ===== Atividade semanal (check-in) =====

model MemberActivity {
  id          String   @id @default(cuid())
  guildId     String
  userId      String
  lastCheckAt DateTime @default(now())

  @@unique([guildId, userId])
}

model ActivityPanel {
  guildId   String   @id
  channelId String
  messageId String
  weekStart DateTime
  updatedAt DateTime @updatedAt
}

// ===== Enquetes (Polls) =====

model Poll {
  id          String   @id @default(cuid())
  guildId     String
  channelId   String
  messageId   String?
  question    String
  optionsJson String   // JSON string: string[] (ordem = Ã­ndices)
  multi       Boolean  @default(false)
  endsAt      DateTime?
  createdById String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  votes PollVote[]

  @@index([guildId, createdAt])
  @@index([guildId, endsAt])
}

model PollVote {
  id        String   @id @default(cuid())
  pollId    String
  userId    String
  optionIdx Int
  createdAt DateTime @default(now())

  poll Poll @relation(fields: [pollId], references: [id], onDelete: Cascade)

  @@unique([pollId, userId, optionIdx]) // toggle por opÃ§Ã£o no multi
  @@index([pollId, optionIdx])
}
