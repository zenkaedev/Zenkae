datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Application {
  id        String   @id @default(cuid())
  guildId   String
  userId    String
  username  String
  nick      String
  className String
  classId   String?
  status    String   @default("pending") // pending | approved | rejected
  qAnswers  String?
  reason    String?
  messageId String?
  channelId String?
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Campos de modera√ß√£o unificados
  moderatedById String? // ID do moderador que fez a a√ß√£o
  moderatedByDisplay String? // Nome ou ID do moderador
  moderatedAt DateTime?

  @@index([guildId, userId])
}

model RecruitSettings {
  guildId               String  @id
  panelChannelId        String?
  formsChannelId        String?
  appearanceTitle       String?
  appearanceDescription String?
  appearanceImageUrl    String?
  appearanceThumbUrl    String?
  appearanceAccent      Int?
  questions             String  @default("[]")

  // Campos para gest√£o de classes e automa√ß√£o
  classes               String  @default("[]")
  defaultApprovedRoleId String?

  dmAcceptedTemplate String   @default("Parab√©ns! Voc√™ foi aprovado üéâ")
  dmRejectedTemplate String   @default("Obrigado por se inscrever. Infelizmente sua candidatura foi recusada. Motivo: {reason}")
  createdAt          DateTime @default(now())
  updatedAt          DateTime @updatedAt
}

model MessageCounter {
  id        String   @id @default(cuid())
  guildId   String
  userId    String
  count     Int      @default(0)
  updatedAt DateTime @updatedAt

  @@unique([guildId, userId])
}

model RecruitPanel {
  guildId   String   @id
  channelId String
  messageId String
  updatedAt DateTime @updatedAt
}

// ---------- Eventos ----------
model Event {
  id          String   @id @default(cuid())
  guildId     String
  title       String
  description String?
  startsAt    DateTime
  status      String   @default("scheduled") // 'scheduled' | 'cancelled' | 'completed'
  channelId   String
  messageId   String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  rsvps     EventRsvp[]
  reminders EventReminder[]

  @@index([guildId, startsAt])
}

model EventRsvp {
  id        String   @id @default(cuid())
  eventId   String
  guildId   String
  userId    String
  choice    String // 'yes' | 'maybe' | 'no'
  updatedAt DateTime @updatedAt

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, userId])
  @@index([guildId, eventId, choice])
}

model EventReminder {
  id      String   @id @default(cuid())
  eventId String
  kind    String // '24h' | '1h' | '15m'
  sentAt  DateTime @default(now())

  event Event @relation(fields: [eventId], references: [id], onDelete: Cascade)

  @@unique([eventId, kind])
}

// ---------- Atividade semanal (check-in) ----------
model MemberActivity {
  id          String   @id @default(cuid())
  guildId     String
  userId      String
  lastCheckAt DateTime @default(now())

  @@unique([guildId, userId])
}

model ActivityPanel {
  guildId   String   @id
  channelId String
  messageId String
  weekStart DateTime
  updatedAt DateTime @updatedAt
}
